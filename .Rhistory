axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
grid.arrange(p1, p2, ncol = 2)
plot_tod <- function(df, col) {
ggplot(df, aes(x = time, y = !!sym(col))) +
geom_point(color = "steelblue", size = 1) +
labs(title = paste0(col, " Over Time of Day"),
x = "Time of Day", y = col) +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5)
)
}
p1 <- plot_tod(water_quality_tf, "log10_entero")
p2 <- plot_tod(water_quality_tf, "log10_conduct")
grid.arrange(p1, p2, ncol = 2)
water_quality_tf <- water_quality_tf |>
mutate(
year = year(date),
doy = yday(date)
)
plot_toy <- function(df, col) {
ggplot(df, aes(x = doy, y = !!sym(col), color = factor(year))) +
geom_point() +
labs(title = paste0(col, "Over Day of Year (Across Years)"),
x = "Day of Year", y = "log10_entero", color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
p1 <- plot_toy(water_quality_tf, "log10_entero")
p2 <- plot_toy(water_quality_tf, "log10_conduct")
grid.arrange(p1, p2, ncol = 2)
water_quality_tf <- water_quality_tf |>
mutate(
year = year(date),
doy = yday(date)
)
plot_doy <- function(df, col) {
ggplot(df, aes(x = doy, y = !!sym(col), color = factor(year))) +
geom_point() +
labs(title = paste0(col, "Over Day of Year (Across Years)"),
x = "Day of Year", y = "log10_entero", color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
p1 <- plot_doy(water_quality_tf, "log10_entero")
p2 <- plot_doy(water_quality_tf, "log10_conduct")
grid.arrange(p1, p2, ncol = 2)
plot_doy_smooth <- function(df, col) {
ggplot(df, aes(x = doy, y = !!sym(col), color = factor(year))) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = "Measure vs. Day of Year (Across Years)",
x = "Day of Year", y = col, color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
p1 <- plot_doy_smooth(water_quality_tf, "log10_entero")
p2 <- plot_doy_smooth(water_quality_tf, "log10_conduct")
grid.arrange(p1, p2, ncol = 2)
names(table(water_quality_tf$region))
all_loc <- names(table(water_quality_tf$region))
all_plot <- lapply(all_loc)
all_plot <- lapply(all_loc, list())
all_plot <- lapply(all_loc, print)
View(all_plot)
all_plot <- sapply(all_loc, print)
all_plot
all_loc <- names(table(water_quality_tf$region))
plot_region <- function(df, loc) {
ggplot(df[df$region == loc, ], aes(x = doy, y = log10_entero, color = factor(year))) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = "Measure vs. Day of Year (Across Years)",
x = "Day of Year", y = "log10_entero", color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
all_plot <- sapply(all_loc, function(x)plot_region(water_quality_tf, x))
all_plot
all_loc <- names(table(water_quality_tf$region))
plot_region <- function(df, loc) {
ggplot(df[df$region == loc, ], aes(x = doy, y = log10_entero, color = factor(year))) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = paste0("Measure vs. Day of Year (Across Years) in ", loc),
x = "Day of Year", y = "log10_entero", color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
all_plot <- sapply(all_loc, function(x)plot_region(water_quality_tf, x))
all_plot
all_plot[[1]]
all_loc <- names(table(water_quality_tf$region))
plot_region <- function(df, loc) {
ggplot(df[df$region == loc, ], aes(x = doy, y = log10_entero, color = factor(year))) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = paste0("Measure vs. Day of Year (Across Years) in ", loc),
x = "Day of Year", y = "log10_entero", color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
all_plot <- lapply(all_loc, function(x)plot_region(water_quality_tf, x))
all_plot[[1]]
grid.arrange(all_plot, ncol = 2)
grid.arrange(unlist(all_plot), ncol = 2)
grid.arrange(unlist(all_plot), ncol = 2)
unlist(all_plot)
do.call(grid.arrange, c(all_plot, ncol = 2))
all_loc <- names(table(water_quality_tf$region))
plot_region <- function(df, loc) {
ggplot(df[df$region == loc, ], aes(x = doy, y = log10_entero, color = factor(year))) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = paste0("Measure vs. Day of Year in ", loc),
x = "Day of Year", y = "log10_entero", color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
all_plot <- lapply(all_loc, function(x)plot_region(water_quality_tf, x))
do.call(grid.arrange, c(all_plot, ncol = 2))
water_entero_range <- water_quality_tf |>
group_by(region, year) |>
mutate(entero_range = max(log10_entero) - min(log10_entero))
View(water_entero_range)
water_entero_range <- water_quality_tf |>
select(region, year, log10_entero)
group_by(region, year) |>
mutate(entero_range = max(log10_entero) - min(log10_entero))
water_entero_range <- water_quality_tf |>
select(region, year, log10_entero) |>
group_by(region, year) |>
mutate(entero_range = max(log10_entero) - min(log10_entero))
water_entero_range <- water_quality_tf |>
select(region, year, log10_entero) |>
group_by(region, year) |>
summarise(
max_count = max(log10_entero),
min_count = min(log10_entero),
count_diff = max_count - min_count,
.groups = "drop"
)
water_entero_range <- water_quality_tf |>
select(region, year, log10_entero) |>
group_by(region, year) |>
summarise(
max_count = max(log10_entero, na.rm = T),
min_count = min(log10_entero, na.rm = T),
count_diff = max_count - min_count,
.groups = "drop"
)
ggplot(water_entero_range, aes(x = year, y = count_diff, color = region)) +
geom_line() +
labs(title = paste0("log10_entero Swing by Region Over Years"),
x = "Year", y = "max(log10_entero) - min(log10_entero)") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
water_entero_range <- water_quality_tf |>
select(region, year, log10_entero) |>
group_by(region, year) |>
summarise(
max_count = max(log10_entero, na.rm = T),
min_count = min(log10_entero, na.rm = T),
count_diff = max_count - min_count,
.groups = "drop"
)
ggplot(water_entero_range, aes(x = year, y = count_diff, color = region)) +
geom_line() +
labs(title = paste0("log10_entero Yearly Swing by Region Over Years"),
x = "Year", y = "max(log10_entero) - min(log10_entero)") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
summary(weather$latitude)
summary(weather$longitude)
summary(weather$date)
water_quality_weather <- merge(
water_quality_tf,
weather,
by.x = date,
by.y = date
)
water_quality_weather <- merge(
water_quality_tf,
weather,
by.x = `date`,
by.y = `date`
)
water_quality_weather <- merge(
water_quality_tf,
weather,
by.x = "date",
by.y = "date"
)
View(water_quality_weather)
water_quality_weather <- merge(
water_quality_tf,
weather[, 1:4],
by.x = "date",
by.y = "date"
)
water_quality_weather <- merge(
water_quality_tf[, c("region", "date", "time", "log10_entero", "log10_conduct", "year", "doy")],
weather[, c("date", "max_temp_C", "min_temp_C", "precipitation_mm")],
by.x = "date",
by.y = "date"
)
water_quality_weather <- merge(
water_quality_tf[, c("region", "date", "time", "log10_entero", "log10_conduct", "year", "doy")],
weather[, c("date", "max_temp_C", "min_temp_C", "precipitation_mm")],
by.x = "date",
by.y = "date"
)
key_measure <- water_quality_weather |>
select(log10_entero, log10_conduct, max_temp_C, min_temp_C, precipitation_mm)
ggpairs(key_measure)
water_quality_weather <- merge(
water_quality_tf[, c("region", "date", "time", "water_temperature_c", "log10_entero", "log10_conduct", "year", "doy")],
weather[, c("date", "max_temp_C", "min_temp_C", "precipitation_mm")],
by.x = "date",
by.y = "date"
)
water_quality_weather <- water_quality_weather |>
summarize(temp_diff = max_temp_C - min_temp_C)
key_measure <- water_quality_weather |>
select(log10_entero, log10_conduct, max_temp_C, min_temp_C, precipitation_mm)
water_quality_weather <- merge(
water_quality_tf[, c("region", "date", "time", "water_temperature_c", "log10_entero", "log10_conduct", "year", "doy")],
weather[, c("date", "max_temp_C", "min_temp_C", "precipitation_mm")],
by.x = "date",
by.y = "date"
)
water_quality_weather <- water_quality_weather |>
mutate(temp_diff = max_temp_C - min_temp_C)
key_measure <- water_quality_weather |>
select(log10_entero, log10_conduct, max_temp_C, min_temp_C, precipitation_mm)
ggpairs(key_measure)
key_measure <- water_quality_weather |>
select(log10_entero, log10_conduct, max_temp_C, min_temp_C, temp_diff, precipitation_mm)
ggpairs(key_measure)
library(tidytuesdayR)
library(ggplot2)
library(tidyr)
library(dplyr)
library(GGally)
library(gridExtra)
library(lubridate)
library(rlang)
library(plotly)
key_measure |>
select(log10_entero, temp_diff, temp_diff) |>
plot_ly(x = ~log10_entero, y = ~temp_diff, z = ~temp_diff, type = "scatter3d", mode = "markers")
key_measure |>
select(log10_entero, temp_diff, temp_diff) |>
plot_ly(x = ~log10_entero, y = ~temp_diff, z = ~temp_diff, type = "scatter3d")
plot_ly(key_measure[, c("log10_entero", "temp_diff", "temp_diff")],
x = ~log10_entero,
y = ~temp_diff,
z = ~temp_diff,
type = "scatter3d",
mode = "markers")
key_measure |>
select(log10_entero, temp_diff, precipitation_mm) |>
plot_ly(x = ~log10_entero, y = ~temp_diff, z = ~precipitation_mm, type = "scatter3d")
key_measure |>
select(log10_entero, temp_diff, precipitation_mm) |>
plot_ly(x = ~log10_entero, y = ~temp_diff, z = ~precipitation_mm,
type = "scatter3d", mode = "markers")
key_measure |>
select(log10_entero, temp_diff, precipitation_mm) |>
plot_ly(x = ~log10_entero, y = ~temp_diff, z = ~precipitation_mm,
type = "scatter3d", mode = "markers", size = 2)
key_measure |>
select(log10_entero, temp_diff, precipitation_mm) |>
plot_ly(x = ~log10_entero, y = ~temp_diff, z = ~precipitation_mm,
type = "scatter3d", mode = "markers", size = 2, alpha = 0.4)
p1 <- plot_doy_smooth(water_quality_weather, "temp_diff")
p2 <- plot_doy_smooth(water_quality_weather, "precipitation_mm")
grid.arrange(p1, p2, ncol = 2)
plot_doy_smooth <- function(df, col) {
ggplot(df, aes(x = doy, y = !!sym(col), color = factor(year))) +
geom_smooth(method = "loess", span = 0.7, se = FALSE) +
labs(title = paste0(col, " vs. Day of Year (Across Years)"),
x = "Day of Year", y = col, color = "Year") +
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
legend.text = element_text(size = 5),
legend.title = element_text(size = 5)
)
}
p1 <- plot_doy_smooth(water_quality_tf, "log10_entero")
p2 <- plot_doy_smooth(water_quality_tf, "log10_conduct")
grid.arrange(p1, p2, ncol = 2)
p1 <- plot_doy_smooth(water_quality_weather, "temp_diff")
p2 <- plot_doy_smooth(water_quality_weather, "precipitation_mm")
grid.arrange(p1, p2, ncol = 2)
water_quality_weather |>
select(log10_entero, temp_diff, precipitation_mm, year) |>
plot_ly(x = ~log10_entero,
y = ~temp_diff,
z = ~precipitation_mm,
color = ~year
type = "scatter3d",
water_quality_weather |>
select(log10_entero, temp_diff, precipitation_mm, year) |>
plot_ly(x = ~log10_entero,
y = ~temp_diff,
z = ~precipitation_mm,
color = ~year,
type = "scatter3d",
mode = "markers",
size = 2,
alpha = 0.4)
water_quality_weather |>
select(log10_entero, temp_diff, precipitation_mm, year) |>
plot_ly(x = ~log10_entero,
y = ~temp_diff,
z = ~precipitation_mm,
color = ~year,
type = "scatter3d",
mode = "markers",
size = 2,
alpha = 0.6)
water_quality_weather |>
select(log10_entero, temp_diff, precipitation_mm, year, region) |>
plot_ly(x = ~log10_entero,
y = ~temp_diff,
z = ~precipitation_mm,
color = ~region,
type = "scatter3d",
mode = "markers",
size = 2,
alpha = 0.6)
water_quality_weather |>
select(log10_entero, temp_diff, precipitation_mm, year, region) |>
plot_ly(x = ~log10_entero,
y = ~temp_diff,
z = ~precipitation_mm,
color = ~region,
type = "scatter3d",
mode = "markers",
size = 2,
alpha = 0.6)
water_quality_weather |>
select(log10_entero, temp_diff, precipitation_mm, year, region) |>
plot_ly(x = ~log10_entero,
y = ~temp_diff,
z = ~precipitation_mm,
color = ~year,
type = "scatter3d",
mode = "markers",
size = 2,
alpha = 0.6)
gc()
View(chat)
View(chat)
View(chat)
View(chat)
getwd()
setwd("/Users/chaoyangye/Documents/Consulting/BridgeInfomatics/rna-seq-star-deseq2-GSSEA-scInference")
list.files()
# --- Load Required Packages ---
suppressPackageStartupMessages({
#library(clusterProfiler)
library(org.Sc.sgd.db)
#library(enrichplot)
library(DOSE)
library(ggplot2)
library(readr)
library(dplyr)
})
df <- read_tsv("/Users/chaoyangye/Documents/Consulting/BridgeInfomatics/rna-seq-star-deseq2-GSSEA-scInference/results/diffexp/treated-vs-untreated.diffexpr.tsv")
df <- read_tsv("/Users/chaoyangye/Documents/Consulting/BridgeInfomatics/rna-seq-star-deseq2-GSSEA-scInference/results/diffexp/treated-vs-untreated.diffexp.tsv")
# Expecting columns: gene, log2FoldChange
df <- df %>% filter(!is.na(log2FoldChange))
# --- Convert Gene Symbols (ORFs) to Entrez IDs ---
gene_df <- bitr(df$gene, fromType = "ORF",
toType = "ENTREZID",
OrgDb = org.Sc.sgd.db)
View(df)
library(clusterProfiler)
# --- Convert Gene Symbols (ORFs) to Entrez IDs ---
gene_df <- bitr(df$gene, fromType = "ORF",
toType = "ENTREZID",
OrgDb = org.Sc.sgd.db)
# --- Merge Data and Rank Genes ---
merged_df <- inner_join(df, gene_df, by = c("gene" = "ORF"))
gene_list <- merged_df$log2FoldChange
names(gene_list) <- merged_df$ENTREZID
gene_list <- sort(gene_list, decreasing = TRUE)
# --- Functions for pathway analysis ---
# --- (GO) ---
gsea_go <- function(gene_list) {
gseGO(
geneList = gene_list,
OrgDb = org.Sc.sgd.db,
ont = "BP",
nPerm = 1000,
minGSSize = 10,
pvalueCutoff = 0.05,
verbose = FALSE
)
}
# --- (KEGG) ---
gsea_kegg <- function(gene_list) {
gseKEGG(
geneList = gene_list,
organism = 'sce',  # KEGG code for S. cerevisiae
nPerm = 1000,
minGSSize = 10,
pvalueCutoff = 0.05,
verbose = FALSE
)
}
gsea_go_result <- gsea_go(gene_list)
head(gene_list)
dim(gene_list)
gsea_go_result <- gsea_go(gene_list)
summary(gene_list)
summary(is.na(gene_list)
)
head(names(gene_list))
summary(is.na(names(gene_list)))
# --- Merge Data and Rank Genes ---
merged_df <- inner_join(df, gene_df, by = c("gene" = "ORF"))
gene_list <- merged_df$log2FoldChange
dim(gene_list)
head(gene_list)
names(gene_list) <- merged_df$ENTREZID
head(gene_list[is.na(names(gene_list))])
gene_list <- gene_list[!is.na(names(gene_list))]
gene_list <- sort(gene_list, decreasing = TRUE)
gsea_go_result <- gsea_go(gene_list)
gsea_kegg_result <- gsea_kegg(gene_list)
